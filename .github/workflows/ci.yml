---
name: CI

on:
  push:
    paths-ignore:
      - "**/README.md"
  pull_request:
    branches: [main]
    paths-ignore:
      - "**/README.md"
  schedule:
    - cron: "50 7 * * *"
  workflow_dispatch:

jobs:
  templates:
    name: Template | ${{ matrix.target.name }}-${{ matrix.env }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        env: ["std", "nostd"]
        target:
          - mcu: "esp32"
            name: "esp32"
          - mcu: "esp32s2"
            name: "esp32-s2"
          - mcu: "esp32s3"
            name: "esp32-s3"
          - mcu: "esp32c3"
            name: "esp32-c3"
          - mcu: "esp32c3"
            name: "esp32-rust-board"
    steps:
      - name: Checkout the repository
        uses: actions/checkout@v3

      - name: Update ownership
        run: |
          sudo chown 1000:1000 -R templates

      - name: Pull Docker image
        run: docker image pull wokwi/builder-rust-${{ matrix.env }}-esp

      - name: Test code example in Docker image (std)
        if: matrix.env == 'std'
        uses: addnab/docker-run-action@v3
        with:
          image: wokwi/builder-rust-${{ matrix.env }}-esp
          options: -u esp -v ${{ github.workspace }}:/home/esp/workspace
          run: |
            . /home/esp/export-esp.sh
            export CARGO_INCREMENTAL=0
            export RUSTC_WRAPPER=$(which sccache)
            cp /home/esp/workspace/templates/rust-${{ matrix.target.name }}/*.rs rust-project-${{ matrix.target.mcu }}/src/
            cat /home/esp/workspace/templates/rust-${{ matrix.target.name }}/Cargo.toml > rust-project-${{ matrix.target.mcu }}/Cargo.toml
            cd rust-project-${{ matrix.target.mcu }}
            cargo build --release --out-dir /home/esp/workspace/templates/rust-${{ matrix.target.name }} -Z unstable-options

      - name: Test code example in Docker image (nostd)
        if: matrix.env == 'nostd'
        uses: addnab/docker-run-action@v3
        with:
          image: wokwi/builder-rust-nostd-esp
          options: -u esp -v ${{ github.workspace }}:/home/esp/workspace
          run: |
            . /home/esp/export-esp.sh
            export CARGO_INCREMENTAL=0
            export RUSTC_WRAPPER=$(which sccache)
            cp /home/esp/workspace/templates/rust-nostd-${{ matrix.target.name }}/*.rs rust-project-${{ matrix.target.mcu }}/src/
            cat /home/esp/workspace/templates/rust-nostd-${{ matrix.target.name }}/Cargo.toml > rust-project-${{ matrix.target.mcu }}/Cargo.toml
            cd rust-project-${{ matrix.target.mcu }}
            cargo build --release --out-dir /home/esp/workspace/templates/rust-nostd-${{ matrix.target.name }} -Z unstable-options

      - name: Wokwi CI check (std)
        if: matrix.env == 'std'
        uses: wokwi/wokwi-ci-action@v1
        with:
          token: ${{ secrets.WOKWI_CLI_TOKEN }}
          path: templates/rust-${{ matrix.target.name }}
          timeout: 10000
          expect_text: 'Hello world!'
          fail_text: 'Error'

      - name: Wokwi CI check (nostd)
        if: matrix.env == 'nostd'
        uses: wokwi/wokwi-ci-action@v1
        with:
          token: ${{ secrets.WOKWI_CLI_TOKEN }}
          path: templates/rust-nostd-${{ matrix.target.name }}
          timeout: 10000
          expect_text: 'Hello world!'
          fail_text: 'Error'

  examples:
    name: Example | ${{ matrix.example.mcu }}-${{ matrix.example.env }}-${{ matrix.example.name }}_${{ matrix.example.id }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        example:
          - name: blinky
            id: "341952826535051858"
            env: nostd
            mcu: esp32
          - name: blinky
            id: "333363577816613460"
            env: std
            mcu: esp32
          - name: blinky
            id: "341956526159692371"
            env: nostd
            mcu: esp32c3
          - name: blinky
            id: "332188235906155092"
            env: std
            mcu: esp32c3
          - name: blinky
            id: "341955297469792851"
            env: nostd
            mcu: esp32s2
          - name: blinky
            id: "333363982163247699"
            env: std
            mcu: esp32s2
          - name: blinky
            id: "349568945405035090"
            env: nostd
            mcu: esp32s3
          - name: blinky
            id: "361808947755817985"
            env: std
            mcu: esp32s3
    steps:
      - name: Checkout the repository
        uses: actions/checkout@v3

      - name: Update ownership
        run: |
          sudo chown 1000:1000 -R examples/${{ matrix.example.mcu }}-${{ matrix.example.env }}-${{ matrix.example.name }}_${{ matrix.example.id }}

      - name: Pull Docker image
        run: docker image pull wokwi/builder-rust-${{ matrix.example.env }}-esp

      - name: Test code example in Docker image
        uses: addnab/docker-run-action@v3
        with:
          image: wokwi/builder-rust-${{ matrix.example.env }}-esp
          options: -u esp -v ${{ github.workspace }}:/home/esp/workspace
          run: |
            . /home/esp/export-esp.sh
            export CARGO_INCREMENTAL=0
            export RUSTC_WRAPPER=$(which sccache)
            cp /home/esp/workspace/examples/${{ matrix.example.mcu }}-${{ matrix.example.env }}-${{ matrix.example.name }}_${{ matrix.example.id }}/*.rs rust-project-${{ matrix.example.mcu }}/src/
            cat /home/esp/workspace/examples/${{ matrix.example.mcu }}-${{ matrix.example.env }}-${{ matrix.example.name }}_${{ matrix.example.id }}/Cargo.toml > rust-project-${{ matrix.example.mcu }}/Cargo.toml
            cd rust-project-${{ matrix.example.mcu }}
            cargo build --release --out-dir /home/esp/workspace/examples/${{ matrix.example.mcu }}-${{ matrix.example.env }}-${{ matrix.example.name }}_${{ matrix.example.id }} -Z unstable-options

      - name: Get diagram
        run: wget -o examples/${{ matrix.example.mcu }}-${{ matrix.example.env }}-${{ matrix.example.name }}_${{ matrix.example.id }}/diagram.json  https://wokwi.com/api/projects/${{ matrix.example.id }}/diagram.json

      - name: Wokwi CI check
        uses: wokwi/wokwi-ci-action@v1
        with:
          token: ${{ secrets.WOKWI_CLI_TOKEN }}
          path: examples/${{ matrix.example.mcu }}-${{ matrix.example.env }}-${{ matrix.example.name }}_${{ matrix.example.id }}
          timeout: 10000
          expect_text: 'Hello world!'
          fail_text: 'Error'
